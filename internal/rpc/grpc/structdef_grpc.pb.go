// Copyright (c) 2025 Matheus Degiovani
// Use of this source code is governed by an ISC
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: structdef.proto

//*
// ffoooo

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	API_Nop_FullMethodName      = "/goserbench.API/Nop"
	API_Add_FullMethodName      = "/goserbench.API/Add"
	API_MultTree_FullMethodName = "/goserbench.API/MultTree"
	API_ToHex_FullMethodName    = "/goserbench.API/ToHex"
)

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	Nop(ctx context.Context, in *VoidData, opts ...grpc.CallOption) (*VoidData, error)
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResult, error)
	MultTree(ctx context.Context, in *MultTreeRequest, opts ...grpc.CallOption) (*MultTreeResponse, error)
	ToHex(ctx context.Context, in *ToHexRequest, opts ...grpc.CallOption) (*ToHexResponse, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Nop(ctx context.Context, in *VoidData, opts ...grpc.CallOption) (*VoidData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoidData)
	err := c.cc.Invoke(ctx, API_Nop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddResult)
	err := c.cc.Invoke(ctx, API_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) MultTree(ctx context.Context, in *MultTreeRequest, opts ...grpc.CallOption) (*MultTreeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultTreeResponse)
	err := c.cc.Invoke(ctx, API_MultTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ToHex(ctx context.Context, in *ToHexRequest, opts ...grpc.CallOption) (*ToHexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToHexResponse)
	err := c.cc.Invoke(ctx, API_ToHex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility.
type APIServer interface {
	Nop(context.Context, *VoidData) (*VoidData, error)
	Add(context.Context, *AddRequest) (*AddResult, error)
	MultTree(context.Context, *MultTreeRequest) (*MultTreeResponse, error)
	ToHex(context.Context, *ToHexRequest) (*ToHexResponse, error)
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAPIServer struct{}

func (UnimplementedAPIServer) Nop(context.Context, *VoidData) (*VoidData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nop not implemented")
}
func (UnimplementedAPIServer) Add(context.Context, *AddRequest) (*AddResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedAPIServer) MultTree(context.Context, *MultTreeRequest) (*MultTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultTree not implemented")
}
func (UnimplementedAPIServer) ToHex(context.Context, *ToHexRequest) (*ToHexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToHex not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}
func (UnimplementedAPIServer) testEmbeddedByValue()             {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	// If the following call pancis, it indicates UnimplementedAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_Nop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Nop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_Nop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Nop(ctx, req.(*VoidData))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_MultTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).MultTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_MultTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).MultTree(ctx, req.(*MultTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ToHex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToHexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ToHex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ToHex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ToHex(ctx, req.(*ToHexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goserbench.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Nop",
			Handler:    _API_Nop_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _API_Add_Handler,
		},
		{
			MethodName: "MultTree",
			Handler:    _API_MultTree_Handler,
		},
		{
			MethodName: "ToHex",
			Handler:    _API_ToHex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "structdef.proto",
}
