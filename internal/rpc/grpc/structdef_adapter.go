package grpc

import (
	"slices"

	"github.com/matheusd/gorpcbench/rpcbench"
)

// The following functions are handwritten adapters necessary by the interfaces
// in rpcbench.
//
// These are not generated by gRPC by default, and are not generally needed in
// production code; they are here because of the specific need of generic test
// structures.

func (x *TreeNode) Child(i int) rpcbench.TreeNode {
	return x.Children[i]
}

func (x *TreeNode) ChildrenCount() int {
	return len(x.Children)
}

func (x *TreeNode) InitChildren(n int) {
	if cap(x.Children) >= n {
		x.Children = x.Children[:n]
	} else {
		x.Children = slices.Grow(x.Children[:0], n)[:n]
	}
	for i := range x.Children {
		if x.Children[i] == nil {
			x.Children[i] = new(TreeNode)
		}
	}
}

func (x *TreeNode) SetValue(v int64) {
	x.Value = v
}

func (x *TreeNode) TotalNodes() int {
	sum := 1
	for _, c := range x.Children {
		sum += c.TotalNodes()
	}
	return sum
}
