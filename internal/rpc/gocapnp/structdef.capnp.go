// Code generated by capnpc-go. DO NOT EDIT.

package gocapnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type TreeNode capnp.Struct

// TreeNode_TypeID is the unique identifier for the type TreeNode.
const TreeNode_TypeID = 0xfb4644d73da03e24

func NewTreeNode(s *capnp.Segment) (TreeNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TreeNode(st), err
}

func NewRootTreeNode(s *capnp.Segment) (TreeNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TreeNode(st), err
}

func ReadRootTreeNode(msg *capnp.Message) (TreeNode, error) {
	root, err := msg.Root()
	return TreeNode(root.Struct()), err
}

func (s TreeNode) String() string {
	str, _ := text.Marshal(0xfb4644d73da03e24, capnp.Struct(s))
	return str
}

func (s TreeNode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TreeNode) DecodeFromPtr(p capnp.Ptr) TreeNode {
	return TreeNode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TreeNode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TreeNode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TreeNode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TreeNode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TreeNode) Value() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s TreeNode) SetValue(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s TreeNode) Children() (TreeNode_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TreeNode_List(p.List()), err
}

func (s TreeNode) HasChildren() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TreeNode) SetChildren(v TreeNode_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated TreeNode_List, preferring placement in s's segment.
func (s TreeNode) NewChildren(n int32) (TreeNode_List, error) {
	l, err := NewTreeNode_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return TreeNode_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TreeNode_List is a list of TreeNode.
type TreeNode_List = capnp.StructList[TreeNode]

// NewTreeNode creates a new list of TreeNode.
func NewTreeNode_List(s *capnp.Segment, sz int32) (TreeNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TreeNode](l), err
}

// TreeNode_Future is a wrapper for a TreeNode promised by a client call.
type TreeNode_Future struct{ *capnp.Future }

func (f TreeNode_Future) Struct() (TreeNode, error) {
	p, err := f.Future.Ptr()
	return TreeNode(p.Struct()), err
}

type API capnp.Client

// API_TypeID is the unique identifier for the type API.
const API_TypeID = 0xfea5a1579f2ffa9e

func (c API) Nop(ctx context.Context, params func(API_nop_Params) error) (API_nop_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfea5a1579f2ffa9e,
			MethodID:      0,
			InterfaceName: "structdef.capnp:API",
			MethodName:    "nop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(API_nop_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return API_nop_Results_Future{Future: ans.Future()}, release

}

func (c API) Add(ctx context.Context, params func(API_add_Params) error) (API_add_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfea5a1579f2ffa9e,
			MethodID:      1,
			InterfaceName: "structdef.capnp:API",
			MethodName:    "add",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(API_add_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return API_add_Results_Future{Future: ans.Future()}, release

}

func (c API) MultTree(ctx context.Context, params func(API_multTree_Params) error) (API_multTree_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfea5a1579f2ffa9e,
			MethodID:      2,
			InterfaceName: "structdef.capnp:API",
			MethodName:    "multTree",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(API_multTree_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return API_multTree_Results_Future{Future: ans.Future()}, release

}

func (c API) ToHex(ctx context.Context, params func(API_toHex_Params) error) (API_toHex_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfea5a1579f2ffa9e,
			MethodID:      3,
			InterfaceName: "structdef.capnp:API",
			MethodName:    "toHex",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(API_toHex_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return API_toHex_Results_Future{Future: ans.Future()}, release

}

func (c API) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c API) String() string {
	return "API(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c API) AddRef() API {
	return API(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c API) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c API) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c API) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (API) DecodeFromPtr(p capnp.Ptr) API {
	return API(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c API) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c API) IsSame(other API) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c API) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c API) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A API_Server is a API with a local implementation.
type API_Server interface {
	Nop(context.Context, API_nop) error

	Add(context.Context, API_add) error

	MultTree(context.Context, API_multTree) error

	ToHex(context.Context, API_toHex) error
}

// API_NewServer creates a new Server from an implementation of API_Server.
func API_NewServer(s API_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(API_Methods(nil, s), s, c)
}

// API_ServerToClient creates a new Client from an implementation of API_Server.
// The caller is responsible for calling Release on the returned Client.
func API_ServerToClient(s API_Server) API {
	return API(capnp.NewClient(API_NewServer(s)))
}

// API_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func API_Methods(methods []server.Method, s API_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfea5a1579f2ffa9e,
			MethodID:      0,
			InterfaceName: "structdef.capnp:API",
			MethodName:    "nop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Nop(ctx, API_nop{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfea5a1579f2ffa9e,
			MethodID:      1,
			InterfaceName: "structdef.capnp:API",
			MethodName:    "add",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Add(ctx, API_add{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfea5a1579f2ffa9e,
			MethodID:      2,
			InterfaceName: "structdef.capnp:API",
			MethodName:    "multTree",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.MultTree(ctx, API_multTree{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfea5a1579f2ffa9e,
			MethodID:      3,
			InterfaceName: "structdef.capnp:API",
			MethodName:    "toHex",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ToHex(ctx, API_toHex{call})
		},
	})

	return methods
}

// API_nop holds the state for a server call to API.nop.
// See server.Call for documentation.
type API_nop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c API_nop) Args() API_nop_Params {
	return API_nop_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c API_nop) AllocResults() (API_nop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return API_nop_Results(r), err
}

// API_add holds the state for a server call to API.add.
// See server.Call for documentation.
type API_add struct {
	*server.Call
}

// Args returns the call's arguments.
func (c API_add) Args() API_add_Params {
	return API_add_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c API_add) AllocResults() (API_add_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return API_add_Results(r), err
}

// API_multTree holds the state for a server call to API.multTree.
// See server.Call for documentation.
type API_multTree struct {
	*server.Call
}

// Args returns the call's arguments.
func (c API_multTree) Args() API_multTree_Params {
	return API_multTree_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c API_multTree) AllocResults() (API_multTree_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return API_multTree_Results(r), err
}

// API_toHex holds the state for a server call to API.toHex.
// See server.Call for documentation.
type API_toHex struct {
	*server.Call
}

// Args returns the call's arguments.
func (c API_toHex) Args() API_toHex_Params {
	return API_toHex_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c API_toHex) AllocResults() (API_toHex_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return API_toHex_Results(r), err
}

// API_List is a list of API.
type API_List = capnp.CapList[API]

// NewAPI creates a new list of API.
func NewAPI_List(s *capnp.Segment, sz int32) (API_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[API](l), err
}

type API_nop_Params capnp.Struct

// API_nop_Params_TypeID is the unique identifier for the type API_nop_Params.
const API_nop_Params_TypeID = 0xf9d58e206a93eb9c

func NewAPI_nop_Params(s *capnp.Segment) (API_nop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return API_nop_Params(st), err
}

func NewRootAPI_nop_Params(s *capnp.Segment) (API_nop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return API_nop_Params(st), err
}

func ReadRootAPI_nop_Params(msg *capnp.Message) (API_nop_Params, error) {
	root, err := msg.Root()
	return API_nop_Params(root.Struct()), err
}

func (s API_nop_Params) String() string {
	str, _ := text.Marshal(0xf9d58e206a93eb9c, capnp.Struct(s))
	return str
}

func (s API_nop_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (API_nop_Params) DecodeFromPtr(p capnp.Ptr) API_nop_Params {
	return API_nop_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s API_nop_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s API_nop_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s API_nop_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s API_nop_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// API_nop_Params_List is a list of API_nop_Params.
type API_nop_Params_List = capnp.StructList[API_nop_Params]

// NewAPI_nop_Params creates a new list of API_nop_Params.
func NewAPI_nop_Params_List(s *capnp.Segment, sz int32) (API_nop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[API_nop_Params](l), err
}

// API_nop_Params_Future is a wrapper for a API_nop_Params promised by a client call.
type API_nop_Params_Future struct{ *capnp.Future }

func (f API_nop_Params_Future) Struct() (API_nop_Params, error) {
	p, err := f.Future.Ptr()
	return API_nop_Params(p.Struct()), err
}

type API_nop_Results capnp.Struct

// API_nop_Results_TypeID is the unique identifier for the type API_nop_Results.
const API_nop_Results_TypeID = 0xfddd3379466d7927

func NewAPI_nop_Results(s *capnp.Segment) (API_nop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return API_nop_Results(st), err
}

func NewRootAPI_nop_Results(s *capnp.Segment) (API_nop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return API_nop_Results(st), err
}

func ReadRootAPI_nop_Results(msg *capnp.Message) (API_nop_Results, error) {
	root, err := msg.Root()
	return API_nop_Results(root.Struct()), err
}

func (s API_nop_Results) String() string {
	str, _ := text.Marshal(0xfddd3379466d7927, capnp.Struct(s))
	return str
}

func (s API_nop_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (API_nop_Results) DecodeFromPtr(p capnp.Ptr) API_nop_Results {
	return API_nop_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s API_nop_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s API_nop_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s API_nop_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s API_nop_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// API_nop_Results_List is a list of API_nop_Results.
type API_nop_Results_List = capnp.StructList[API_nop_Results]

// NewAPI_nop_Results creates a new list of API_nop_Results.
func NewAPI_nop_Results_List(s *capnp.Segment, sz int32) (API_nop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[API_nop_Results](l), err
}

// API_nop_Results_Future is a wrapper for a API_nop_Results promised by a client call.
type API_nop_Results_Future struct{ *capnp.Future }

func (f API_nop_Results_Future) Struct() (API_nop_Results, error) {
	p, err := f.Future.Ptr()
	return API_nop_Results(p.Struct()), err
}

type API_add_Params capnp.Struct

// API_add_Params_TypeID is the unique identifier for the type API_add_Params.
const API_add_Params_TypeID = 0xfbf5e01c6a8344e7

func NewAPI_add_Params(s *capnp.Segment) (API_add_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return API_add_Params(st), err
}

func NewRootAPI_add_Params(s *capnp.Segment) (API_add_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return API_add_Params(st), err
}

func ReadRootAPI_add_Params(msg *capnp.Message) (API_add_Params, error) {
	root, err := msg.Root()
	return API_add_Params(root.Struct()), err
}

func (s API_add_Params) String() string {
	str, _ := text.Marshal(0xfbf5e01c6a8344e7, capnp.Struct(s))
	return str
}

func (s API_add_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (API_add_Params) DecodeFromPtr(p capnp.Ptr) API_add_Params {
	return API_add_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s API_add_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s API_add_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s API_add_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s API_add_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s API_add_Params) A() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s API_add_Params) SetA(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s API_add_Params) B() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s API_add_Params) SetB(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

// API_add_Params_List is a list of API_add_Params.
type API_add_Params_List = capnp.StructList[API_add_Params]

// NewAPI_add_Params creates a new list of API_add_Params.
func NewAPI_add_Params_List(s *capnp.Segment, sz int32) (API_add_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[API_add_Params](l), err
}

// API_add_Params_Future is a wrapper for a API_add_Params promised by a client call.
type API_add_Params_Future struct{ *capnp.Future }

func (f API_add_Params_Future) Struct() (API_add_Params, error) {
	p, err := f.Future.Ptr()
	return API_add_Params(p.Struct()), err
}

type API_add_Results capnp.Struct

// API_add_Results_TypeID is the unique identifier for the type API_add_Results.
const API_add_Results_TypeID = 0xce72004cadd1cdc5

func NewAPI_add_Results(s *capnp.Segment) (API_add_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return API_add_Results(st), err
}

func NewRootAPI_add_Results(s *capnp.Segment) (API_add_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return API_add_Results(st), err
}

func ReadRootAPI_add_Results(msg *capnp.Message) (API_add_Results, error) {
	root, err := msg.Root()
	return API_add_Results(root.Struct()), err
}

func (s API_add_Results) String() string {
	str, _ := text.Marshal(0xce72004cadd1cdc5, capnp.Struct(s))
	return str
}

func (s API_add_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (API_add_Results) DecodeFromPtr(p capnp.Ptr) API_add_Results {
	return API_add_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s API_add_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s API_add_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s API_add_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s API_add_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s API_add_Results) Res() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s API_add_Results) SetRes(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// API_add_Results_List is a list of API_add_Results.
type API_add_Results_List = capnp.StructList[API_add_Results]

// NewAPI_add_Results creates a new list of API_add_Results.
func NewAPI_add_Results_List(s *capnp.Segment, sz int32) (API_add_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[API_add_Results](l), err
}

// API_add_Results_Future is a wrapper for a API_add_Results promised by a client call.
type API_add_Results_Future struct{ *capnp.Future }

func (f API_add_Results_Future) Struct() (API_add_Results, error) {
	p, err := f.Future.Ptr()
	return API_add_Results(p.Struct()), err
}

type API_multTree_Params capnp.Struct

// API_multTree_Params_TypeID is the unique identifier for the type API_multTree_Params.
const API_multTree_Params_TypeID = 0xb91ace4c4a633a57

func NewAPI_multTree_Params(s *capnp.Segment) (API_multTree_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return API_multTree_Params(st), err
}

func NewRootAPI_multTree_Params(s *capnp.Segment) (API_multTree_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return API_multTree_Params(st), err
}

func ReadRootAPI_multTree_Params(msg *capnp.Message) (API_multTree_Params, error) {
	root, err := msg.Root()
	return API_multTree_Params(root.Struct()), err
}

func (s API_multTree_Params) String() string {
	str, _ := text.Marshal(0xb91ace4c4a633a57, capnp.Struct(s))
	return str
}

func (s API_multTree_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (API_multTree_Params) DecodeFromPtr(p capnp.Ptr) API_multTree_Params {
	return API_multTree_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s API_multTree_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s API_multTree_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s API_multTree_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s API_multTree_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s API_multTree_Params) Mult() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s API_multTree_Params) SetMult(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s API_multTree_Params) Tree() (TreeNode, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TreeNode(p.Struct()), err
}

func (s API_multTree_Params) HasTree() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s API_multTree_Params) SetTree(v TreeNode) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTree sets the tree field to a newly
// allocated TreeNode struct, preferring placement in s's segment.
func (s API_multTree_Params) NewTree() (TreeNode, error) {
	ss, err := NewTreeNode(capnp.Struct(s).Segment())
	if err != nil {
		return TreeNode{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// API_multTree_Params_List is a list of API_multTree_Params.
type API_multTree_Params_List = capnp.StructList[API_multTree_Params]

// NewAPI_multTree_Params creates a new list of API_multTree_Params.
func NewAPI_multTree_Params_List(s *capnp.Segment, sz int32) (API_multTree_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[API_multTree_Params](l), err
}

// API_multTree_Params_Future is a wrapper for a API_multTree_Params promised by a client call.
type API_multTree_Params_Future struct{ *capnp.Future }

func (f API_multTree_Params_Future) Struct() (API_multTree_Params, error) {
	p, err := f.Future.Ptr()
	return API_multTree_Params(p.Struct()), err
}
func (p API_multTree_Params_Future) Tree() TreeNode_Future {
	return TreeNode_Future{Future: p.Future.Field(0, nil)}
}

type API_multTree_Results capnp.Struct

// API_multTree_Results_TypeID is the unique identifier for the type API_multTree_Results.
const API_multTree_Results_TypeID = 0x983900eb0fa214ee

func NewAPI_multTree_Results(s *capnp.Segment) (API_multTree_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return API_multTree_Results(st), err
}

func NewRootAPI_multTree_Results(s *capnp.Segment) (API_multTree_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return API_multTree_Results(st), err
}

func ReadRootAPI_multTree_Results(msg *capnp.Message) (API_multTree_Results, error) {
	root, err := msg.Root()
	return API_multTree_Results(root.Struct()), err
}

func (s API_multTree_Results) String() string {
	str, _ := text.Marshal(0x983900eb0fa214ee, capnp.Struct(s))
	return str
}

func (s API_multTree_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (API_multTree_Results) DecodeFromPtr(p capnp.Ptr) API_multTree_Results {
	return API_multTree_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s API_multTree_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s API_multTree_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s API_multTree_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s API_multTree_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s API_multTree_Results) Res() (TreeNode, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TreeNode(p.Struct()), err
}

func (s API_multTree_Results) HasRes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s API_multTree_Results) SetRes(v TreeNode) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRes sets the res field to a newly
// allocated TreeNode struct, preferring placement in s's segment.
func (s API_multTree_Results) NewRes() (TreeNode, error) {
	ss, err := NewTreeNode(capnp.Struct(s).Segment())
	if err != nil {
		return TreeNode{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// API_multTree_Results_List is a list of API_multTree_Results.
type API_multTree_Results_List = capnp.StructList[API_multTree_Results]

// NewAPI_multTree_Results creates a new list of API_multTree_Results.
func NewAPI_multTree_Results_List(s *capnp.Segment, sz int32) (API_multTree_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[API_multTree_Results](l), err
}

// API_multTree_Results_Future is a wrapper for a API_multTree_Results promised by a client call.
type API_multTree_Results_Future struct{ *capnp.Future }

func (f API_multTree_Results_Future) Struct() (API_multTree_Results, error) {
	p, err := f.Future.Ptr()
	return API_multTree_Results(p.Struct()), err
}
func (p API_multTree_Results_Future) Res() TreeNode_Future {
	return TreeNode_Future{Future: p.Future.Field(0, nil)}
}

type API_toHex_Params capnp.Struct

// API_toHex_Params_TypeID is the unique identifier for the type API_toHex_Params.
const API_toHex_Params_TypeID = 0x880f4d13f4a8eb97

func NewAPI_toHex_Params(s *capnp.Segment) (API_toHex_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return API_toHex_Params(st), err
}

func NewRootAPI_toHex_Params(s *capnp.Segment) (API_toHex_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return API_toHex_Params(st), err
}

func ReadRootAPI_toHex_Params(msg *capnp.Message) (API_toHex_Params, error) {
	root, err := msg.Root()
	return API_toHex_Params(root.Struct()), err
}

func (s API_toHex_Params) String() string {
	str, _ := text.Marshal(0x880f4d13f4a8eb97, capnp.Struct(s))
	return str
}

func (s API_toHex_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (API_toHex_Params) DecodeFromPtr(p capnp.Ptr) API_toHex_Params {
	return API_toHex_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s API_toHex_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s API_toHex_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s API_toHex_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s API_toHex_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s API_toHex_Params) In() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s API_toHex_Params) HasIn() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s API_toHex_Params) SetIn(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// API_toHex_Params_List is a list of API_toHex_Params.
type API_toHex_Params_List = capnp.StructList[API_toHex_Params]

// NewAPI_toHex_Params creates a new list of API_toHex_Params.
func NewAPI_toHex_Params_List(s *capnp.Segment, sz int32) (API_toHex_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[API_toHex_Params](l), err
}

// API_toHex_Params_Future is a wrapper for a API_toHex_Params promised by a client call.
type API_toHex_Params_Future struct{ *capnp.Future }

func (f API_toHex_Params_Future) Struct() (API_toHex_Params, error) {
	p, err := f.Future.Ptr()
	return API_toHex_Params(p.Struct()), err
}

type API_toHex_Results capnp.Struct

// API_toHex_Results_TypeID is the unique identifier for the type API_toHex_Results.
const API_toHex_Results_TypeID = 0x890d0dbe87503908

func NewAPI_toHex_Results(s *capnp.Segment) (API_toHex_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return API_toHex_Results(st), err
}

func NewRootAPI_toHex_Results(s *capnp.Segment) (API_toHex_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return API_toHex_Results(st), err
}

func ReadRootAPI_toHex_Results(msg *capnp.Message) (API_toHex_Results, error) {
	root, err := msg.Root()
	return API_toHex_Results(root.Struct()), err
}

func (s API_toHex_Results) String() string {
	str, _ := text.Marshal(0x890d0dbe87503908, capnp.Struct(s))
	return str
}

func (s API_toHex_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (API_toHex_Results) DecodeFromPtr(p capnp.Ptr) API_toHex_Results {
	return API_toHex_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s API_toHex_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s API_toHex_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s API_toHex_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s API_toHex_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s API_toHex_Results) Out() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s API_toHex_Results) HasOut() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s API_toHex_Results) SetOut(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// API_toHex_Results_List is a list of API_toHex_Results.
type API_toHex_Results_List = capnp.StructList[API_toHex_Results]

// NewAPI_toHex_Results creates a new list of API_toHex_Results.
func NewAPI_toHex_Results_List(s *capnp.Segment, sz int32) (API_toHex_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[API_toHex_Results](l), err
}

// API_toHex_Results_Future is a wrapper for a API_toHex_Results promised by a client call.
type API_toHex_Results_Future struct{ *capnp.Future }

func (f API_toHex_Results_Future) Struct() (API_toHex_Results, error) {
	p, err := f.Future.Ptr()
	return API_toHex_Results(p.Struct()), err
}

const schema_d9767bf36f62edd8 = "x\xda\x8cTOH\x14a\x14\x7f\xbf\xef\x9bu$X" +
	"w\xc7\xd9\x93\x04\x96,T\xa2\xe6\x9f\x84V0wA" +
	"DEc\xbe\x08\xc4\xe3\xb8;\x91\xb2\xff\x9a\x9d\xd5\xa4" +
	"St\xa8.]:\xe4!*\x85\xa0\x02\x0f\x1d\xbbt" +
	"\xebP\x90\xe0!\xccC\xd8\xad\x83\xd4\xa5:\xa4\xd4\xc4" +
	"7\xbb;\xb3hj\xb7e\x7f\xef\xfd\xfe\xbco\xde\xeb" +
	"~\x81\xa4\xd2\x13\xdeP\x88\x89\xf3\xa1\x06\xf7\xc1\xf6\xb3" +
	"\x1f\xfad\xe4\x0ei1\x10\x85\xa0\x12\xf5\x09v\x0c\x04" +
	"}\x9a\x0d\x11\xdc\xc6\x84q\xfbu8|\xb7\xbe`\x91" +
	"5\xcb\x82\x9b\xb2`\xeb[l%\xb2\x9dX\xaa\x83\x97" +
	"Y\xbb\x84\x9f{\xfdS\x03\xe9\xf1\x89\xb5\x96W$b" +
	"\xf0+\xde\xb26Y\xb1\xce\x16\x08[o\xde\xaf\xafN" +
	"\xd8k\x15\\\x91p'g\x12\xee\xe1\x92\xe0\xe1\xf6\xfd" +
	"\xb9\x13\xf7>\xfc\xaa\x18\x90\xb8.\xf8\x0e)n\xfc\xc2" +
	"\x93\xc1\x8d\xe1\x91]\x12Q\xc0\xfd\xf8u\xa6\xf0\xfd\xc6" +
	"\xfcfEA\xef\xe7\xef\xf4\x14\x97\xbf\x06\xf9\x02\xc1\xfd" +
	"2|k\xee\xf8\xe7\x9f\xbb\xd2\x06\xab\xd2\xac\xf2\x1d\x82" +
	"\xfe\xd2\xc3O-\xe6F\x16\xfb>\xfd\x0eT\xfa\xc2\x8a" +
	"\xe7BS\xa4\x8bG;g\x1fO-?\xfdCZ\x94" +
	"\x07Z\xd2\xa4\xb2\xa2'\xbc\xfa~E\x85\xbe\xa9\xa8\xd4" +
	"\xe1\x96\x1c\xbb\x9cv2\x16\xbf\xd2\x956\x8b\xf9\xe2@" +
	"\xca\x18\xebr\x0a\xa3\xd6\xf5\xb8a\xdaf\xaeD$\x14" +
	"\xae\x10) \xd2\xc2-D\xa2\x91C\xc4\x18\xf8l\x1e" +
	"ab\x08\x13\x0ec\xb9d\x95\xcaY\x07\xa5z\x96\xb6" +
	"\x80E-\x94\x9d\xc3ir\xe5\xacs\xd9\xb6,\xc9\x14" +
	")g\x9d\x03\x99l\xab\x84h0k\x02\xa2Gr\x1a" +
	"\xa6\xad\x9a\xb9\x92h\xf4)\xcf\xb4\x13\x898\x87\xe8f" +
	"\x00\xbc\x97\xd6:\xe5\x7f\xa79\xc49\x86\x88\xecE\x88" +
	"\x18B\x84\x88c[\xd6\xff\x8a\x9a\x99Lu\x1a%:" +
	",C\x95\xdb'a\xf5$\xf9B1>Ty\x99\xfd" +
	"\x052\xd2\xc5B\xc6\"2\x80\xfaL\xbd\xff\xc84N" +
	"$:8\xc4(C\xeb\xbc\x99-[\xbep\xfa\xeal" +
	"6c[y\"B\x13\xc1\xe0\xd8\x13\xb1\xe9 w2" +
	"b\xd5]\xbd|s \xaf\xf9\xfa\xcd\xc1La\xd6\xb4" +
	"1\xb3/>\xdf\x1b\xff\xa8\x19\xe6\x0bEj\xf0\xdbQ" +
	"kWS\xc6\x98\x1cK\x94\x87\x88\xfc]Em\x9d\xb4" +
	"km\xc44KE\xb0\x81\xf0\xf6\x9d\xec5mZb" +
	"\x93*\x98\x7f$\xe0\x1d\x13J,i\xa9qbZB" +
	"\x05\xf7/\x14j\x97H\xeb\xec%\xa6\x9dT\xa5\xa5$" +
	"T3\x93I\xc2\xad}{D\x94D\xab\xb7$I\x18" +
	"\xc0\xdf\x00\x00\x00\xff\xff\x0f\x0f6\xaf"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d9767bf36f62edd8,
		Nodes: []uint64{
			0x880f4d13f4a8eb97,
			0x890d0dbe87503908,
			0x983900eb0fa214ee,
			0xb91ace4c4a633a57,
			0xce72004cadd1cdc5,
			0xf9d58e206a93eb9c,
			0xfb4644d73da03e24,
			0xfbf5e01c6a8344e7,
			0xfddd3379466d7927,
			0xfea5a1579f2ffa9e,
		},
		Compressed: true,
	})
}
