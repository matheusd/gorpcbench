package gocapnp

import "github.com/matheusd/gorpcbench/rpcbench"

func multTree(mult int64, t TreeNode) {
	t.SetValue(t.Value() * mult)
	children, err := t.Children()
	if err != nil {
		return
	}

	for i := range children.Len() {
		multTree(mult, children.At(i))
	}
}

func copyTree(src, tgt TreeNode) {
	tgt.SetValue(src.Value())
	srcChildren, err := src.Children()
	if err != nil {
		return
	}

	tgtChildren, err := tgt.NewChildren(int32(srcChildren.Len()))
	if err != nil {
		return
	}
	for i := range srcChildren.Len() {
		copyTree(srcChildren.At(i), tgtChildren.At(i))
	}
}

// The following functions are handwritten adapters necessary by the interfaces
// in rpcbench.
//
// These are not generated by capnp by default, and are not generally needed in
// production code; they are here because of the specific need of generic test
// structures.

func (t TreeNode) ChildrenCount() int {
	children, err := t.Children()
	if err != nil {
		return 0
	}

	return children.Len()
}

func (t TreeNode) GetValue() int64 {
	return t.Value()
}

func (t TreeNode) InitChildren(n int) {
	t.NewChildren(int32(n))
}

func (t TreeNode) TotalNodes() int {
	sum := 1
	children, err := t.Children()
	if err != nil {
		return sum
	}

	for i := range children.Len() {
		sum += children.At(i).TotalNodes()
	}
	return sum
}

func (t TreeNode) Child(i int) rpcbench.TreeNode {
	children, err := t.Children()
	if err != nil {
		return nil
	}

	return children.At(i)
}
